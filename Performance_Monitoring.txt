-- SQLs with the highest lock waits 
column sql_text format a40 heading "SQL Text"
column app_time_ms format 99,999,999 heading "AppTime(ms)"
column app_time_pct format 999.99 heading "SQL App|Time%"
column pct_of_app_time format 999.99 heading "% Tot|App Time"
set pagesize 1000
set lines 100
set echo on 

WITH sql_app_waits AS 
    (SELECT sql_id, SUBSTR(sql_text, 1, 80) sql_text, 
            application_wait_time/1000 app_time_ms,
            elapsed_time,
            ROUND(application_wait_time * 100 / 
                elapsed_time, 2) app_time_pct,
            ROUND(application_wait_time * 100 / 
                SUM(application_wait_time) OVER (), 2) pct_of_app_time,
            RANK() OVER (ORDER BY application_wait_Time DESC) ranking
       FROM v$sql
      WHERE elapsed_time > 0
        AND application_wait_time>0 )
SELECT sql_text, app_time_ms, app_time_pct,
       pct_of_app_time, ranking
FROM sql_app_waits
WHERE ranking <= 10
ORDER BY ranking  ; 

-- Segments with the highest lock waits 
column object_name format a30
column row_lock_wait format 9,999,999
column pct format 99.99
set echo on 

SELECT object_name, VALUE row_lock_waits, 
       ROUND(VALUE * 100 / SUM(VALUE) OVER (), 2) pct
  FROM v$segment_statistics
 WHERE statistic_name = 'row lock waits' AND VALUE > 0
 ORDER BY VALUE DESC; 

--Show sessions with a specific USERNAME and their lock waits 
column wait_type format a35
column lock_name format a12
column total_waits format  999,999,999
column time_waited_seconds format 999,999.99
column pct format 99.99
set pagesize 10000
set lines 100
set echo on 

WITH session_event AS 
  (SELECT CASE WHEN event LIKE 'enq:%' 
              THEN event  ELSE wait_class
          END wait_type, e.*
     FROM gv$session_event e   )
SELECT  wait_type,SUM(total_waits) total_waits,
       round(SUM(time_waited_micro)/1000000,2) time_waited_seconds,
       ROUND(  SUM(time_waited_micro)
             * 100
             / SUM(SUM(time_waited_micro)) OVER (), 2) pct
FROM (SELECT  e.sid, wait_type, event, total_waits, time_waited_micro
      FROM    session_event e
      UNION
      SELECT  sid, 'CPU', stat_name, NULL, VALUE
      FROM gv$sess_time_model
      WHERE stat_name IN ('background cpu time', 'DB CPU')) l
WHERE wait_type <> 'Idle'
 and sid in (select sid from gv$session where username='IRIS_DE') 
GROUP BY wait_type 
ORDER BY 4 DESC
/

-- Lock tree built up from GV$SESSION
column sid format a8
column object_name format a20
column sql_text format a50
set echo on 
WITH sessions AS
   (SELECT /*+materialize*/
           sid, blocking_session, row_wait_obj#, sql_id
      FROM gv$session)
SELECT LPAD(' ', LEVEL ) || sid sid, object_name, 
       substr(sql_text,1,40) sql_text
  FROM sessions s 
  LEFT OUTER JOIN dba_objects 
       ON (object_id = row_wait_obj#)
  LEFT OUTER JOIN gv$sql
       USING (sql_id)
 WHERE sid IN (SELECT blocking_session FROM sessions)
    OR blocking_session IS NOT NULL
 CONNECT BY PRIOR sid = blocking_session
 START WITH blocking_session IS NULL; 

-- blocking locks script 
column sql_text format a35 heading "SQL text"
column blocking_user format a8 Heading "Blocking|user"
column blocked_user format a8  heading "Blocked|user"
column blocking_sid format 9999 heading "Blocking|SID"
column blocked_sid format 9999 heading "Blocked|SID"
column type format a4 heading "Lock|Type"
set pagesize 1000
set lines 100
set echo on 

WITH sessions AS 
       (SELECT /*+ materialize*/ username,sid,sql_id
          FROM Gv$session),
     locks AS 
        (SELECT /*+ materialize */ *
           FROM Gv$lock)
SELECT l2.type,s1.username blocking_user, s1.sid blocking_sid, 
        s2.username blocked_user, s2.sid blocked_sid, sq.sql_text
  FROM locks l1
  JOIN locks l2 USING (id1, id2)
  JOIN sessions s1 ON (s1.sid = l1.sid)
  JOIN sessions s2 ON (s2.sid = l2.sid)
  LEFT OUTER JOIN  Gv$sql sq
       ON (sq.sql_id = s2.sql_id)
 WHERE l1.BLOCK = 1 AND l2.request > 0;

--Show SQLs for a particular module with lock waits 
SELECT COUNT( * ), SUM(elapsed_time) elapsed_Time,
       SUM(application_wait_time) application_time,
       ROUND(SUM(elapsed_time) * 100 / 
            SUM(application_wait_time), 2)
            pct_application_time
FROM v$sql
WHERE module = '&app'
/

--Show SQLs for a particular module with lock waits 
SELECT COUNT( * ), SUM(elapsed_time) elapsed_Time,
       SUM(application_wait_time) application_time,
       ROUND(SUM(elapsed_time) * 100 / 
            SUM(application_wait_time), 2)
            pct_application_time
FROM v$sql
WHERE module = '&app'
/

--Total waits for the session
SET LINESIZE 200
SET PAGESIZE 1000
SET VERIFY OFF
COLUMN username FORMAT A20
COLUMN event FORMAT A40

SELECT NVL(s.username, '(oracle)') AS username,
       s.sid,
       s.serial#,
       se.event,
       se.total_waits,
       se.total_timeouts,
       se.time_waited,
       se.average_wait,
       se.max_wait,
       se.time_waited_micro
FROM   gv$session_event se,
       gv$session s
WHERE  s.sid = se.sid
AND    s.sid = &1
ORDER BY se.time_waited DESC;

--Wait events for the session
SELECT INST_ID,sid,event,state,WAIT_TIME_MICRO,TIME_REMAINING_MICRO,p1 "file#", p2 "block#", p3 "class#" 
       FROM gv$session_wait where sid =&1;

SELECT sid, serial#, event, (seconds_in_wait/1000000) seconds_in_wait
       FROM   gv$session where sid=&1 ORDER BY sid;

 select * from   v$session_event
       where  event = 'db file sequential read' and sid=&1
       order by time_waited;

SELECT * FROM   gv$session_wait_class WHERE  sid = 858;

--System wait events
SELECT a.wait_class, sum(b.time_waited)/1000000 time_waited
       FROM   gv$event_name a
       JOIN gv$system_event b ON a.name = b.event

       GROUP BY a.wait_class;

--Average wait time
tti "AVERAGE WAIT TIME FOR READ REQUESTS"
SELECT a.average_wait "SEQ READ", b.average_wait "SCAT READ"
      FROM sys.gv_$system_event a, sys.gv_$system_event b
     WHERE a.event = 'db file sequential read'
       AND b.event = 'db file scattered read';

select * from   gv$session_event

       where   sid=858 order by time_waited desc;

--display waits by day using the AWR dba_hist_service_wait_class table:
col c1 heading 'end|time'    format a10
col c2 heading 'wait|class'  format a20
col c3 heading 'time|waited' format 999,999,999,999

break on c1 skip 2

select 
   trunc(end_interval_time)  c1,
   wait_class                c2,
   sum(time_waited)          c3
from
   dba_hist_service_wait_class
join 
   dba_hist_snapshot USING(snap_id)
group by
   trunc(end_interval_time),
   wait_class
order by 
   trunc(end_interval_time),

c3 desc;